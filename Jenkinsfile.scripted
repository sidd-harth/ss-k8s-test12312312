podTemplate(cloud: 'dasher-prod-k8s-us-east', label: 'nodejs-pod', containers: [
    containerTemplate(name: 'node-18', image: 'node:18-alpine', ttyEnabled: true, command: 'cat', privileged: true),
    containerTemplate(name: 'node-19', image: 'node:19-alpine', ttyEnabled: true, command: 'cat', privileged: true)
]) {
    node('ubuntu-docker') {

    env.NODEJS_HOME = "${tool 'nodejs-22-6-0'}"
    env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
    env.MONGO_URI = "mongodb+srv://supercluster.d83jj.mongodb.net/superData"

    properties([
        disableConcurrentBuilds(abortPrevious: true)
    ])

    stage('Checkout') {
        checkout scm
    }

    wrap([$class: 'TimestamperBuildWrapper']) {
        stage('Installing Dependencies') {
            cache(maxCacheSize: 550, caches: [
                arbitraryFileCache(
                cacheName: 'npm-dependency-cache',
                cacheValidityDecidingFile: 'package-lock.json',
                includes: '**/*',
                path: 'node_modules')
            ]) {
                sh 'node -v'
                sh 'npm install --no-audit'
                stash(name: 'solar-system-node-modules', includes: 'node_modules/')
            }
        }
    }

    stage('Unit Tests') {
        node ('ubuntu-docker') {
            checkout scm
            unstash 'solar-system-node-modules'
            sh 'node -v'
            withCredentials([usernamePassword(credentialsId: 'mongo-db-credentials', usernameVariable: 'MONGO_USERNAME', passwordVariable: 'MONGO_PASSWORD')]) {
                sh 'ls -ltr'
                sh 'npm test'
            }
        }
    }

    stage('Code Coverage') {
        node('nodejs-pod') {
            container('node-19') {
                checkout scm
                unstash 'solar-system-node-modules'
                catchError(buildResult: 'SUCCESS', message: 'Oops! it will be fixed in future releases', stageResult: 'UNSTABLE') {
                    sh 'npm run coverage'
                }
            }
        }
    }
}
}